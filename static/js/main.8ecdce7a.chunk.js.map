{"version":3,"sources":["NavBar.js","Player.js","PlayersList.js","Points.js","EndOfGamePopup.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","Player","props","bgColor","color","type","alt","src","name","score","history","rank","PlayersList","rankingArray","players","filter","player","currentPlayer","map","i","key","Points","value","onClick","scoreChange","EndOfGamePopup","this","winner","close","React","Component","App","togglePopup","setState","showEogPopup","state","resetPlayersInfo","nbOfAlivePlayers","closeEogPopup","managePlayers","indexCurrentPlayer","isRearrangementDone","console","log","onChange","event","updatePlayerScoreAndColor","target","length","currentScore","currentColor","newPoints","newScore","newColor","isDisqualified","Number","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kWAiBeA,G,MAbA,WACd,OACC,yBAAKC,UAAU,QACT,wBAAIA,UAAU,YACZ,wCACA,qCACA,wBAAIA,UAAU,wBAAd,QACA,0CC0DKC,G,MAjEA,SAACC,GACf,IAAIC,EAAU,GACd,OAAQD,EAAME,OACb,IAAK,MACJD,EAAU,SACV,MACD,IAAK,SACJA,EAAU,YACV,MACD,IAAK,SACJA,EAAU,YACV,MACD,IAAK,OACJA,EAAU,UACV,MACD,IAAK,QACL,QACCA,EAAU,WAIZ,MAAmB,aAAfD,EAAMG,KAER,kBAAC,WAAD,KACC,yBAAKL,UAAWG,EAAU,gDACzB,yBAAKH,UAAU,WACd,yBAAKM,IAAI,SAASC,IAAG,+BAA0BL,EAAMM,SAEtD,yBAAKR,UAAU,QACVE,EAAMM,MAER,yBAAKR,UAAU,SAChBE,EAAMO,MADL,KACc,GAAKP,EAAMO,MADzB,UAGH,yBAAKT,UAAU,WACbE,EAAMQ,SAER,yBAAKV,UAAU,QACbE,EAAMS,QAOX,kBAAC,WAAD,KACC,yBAAKX,UAAWG,EAAU,wCACzB,yBAAKH,UAAU,QACbE,EAAMS,MAER,yBAAKX,UAAU,kBACd,yBAAKM,IAAI,SAASC,IAAG,+BAA0BL,EAAMM,SAEtD,yBAAKR,UAAU,QACVE,EAAMM,MAER,yBAAKR,UAAU,SAChBE,EAAMO,MADL,KACc,GAAKP,EAAMO,MADzB,cC/BQG,G,MAxBK,SAACV,GAIpB,IAIMW,EAJuBX,EAAMY,QAAQC,QAAO,SAACC,GAClD,OAAOA,EAAOR,OAASN,EAAMe,cAAcT,QAGFU,KAAI,SAACF,EAAQG,GACtD,OAAO,kBAAC,EAAD,CAAQC,IAAKD,EAAGd,KAAK,SAASM,KAAMK,EAAOL,KAAMP,MAAOY,EAAOZ,MAAOI,KAAMQ,EAAOR,KAAMC,MAAOO,EAAOP,WAG/G,OACC,kBAAC,WAAD,KACC,yBAAKT,UAAU,kBACd,kBAAC,EAAD,CAAQK,KAAK,WAAWD,MAAOF,EAAMe,cAAcb,MAAOI,KAAMN,EAAMe,cAAcT,KAAMC,MAAOP,EAAMe,cAAcR,MAAOC,QAASR,EAAMe,cAAcP,QAASC,KAAMT,EAAMe,cAAcN,QAE7L,yBAAKX,UAAU,WACba,MCGUQ,G,MAvBA,SAACnB,GACf,OACC,kBAAC,WAAD,KACC,yBAAKF,UAAU,qBACd,4BAAQK,KAAK,SAASL,UAAU,SAASsB,MAAM,IAAIC,QAASrB,EAAMsB,aAAlE,KACA,4BAAQnB,KAAK,SAASL,UAAU,SAASsB,MAAM,IAAIC,QAASrB,EAAMsB,aAAlE,KACA,4BAAQnB,KAAK,SAASL,UAAU,SAASsB,MAAM,IAAIC,QAASrB,EAAMsB,aAAlE,KACA,4BAAQnB,KAAK,SAASL,UAAU,SAASsB,MAAM,IAAIC,QAASrB,EAAMsB,aAAlE,KACA,4BAAQnB,KAAK,SAASL,UAAU,SAASsB,MAAM,IAAIC,QAASrB,EAAMsB,aAAlE,KACA,4BAAQnB,KAAK,SAASL,UAAU,SAASsB,MAAM,IAAIC,QAASrB,EAAMsB,aAAlE,KACA,4BAAQnB,KAAK,SAASL,UAAU,SAASsB,MAAM,IAAIC,QAASrB,EAAMsB,aAAlE,KACA,4BAAQnB,KAAK,SAASL,UAAU,SAASsB,MAAM,IAAIC,QAASrB,EAAMsB,aAAlE,KACA,4BAAQnB,KAAK,SAASL,UAAU,SAASsB,MAAM,IAAIC,QAASrB,EAAMsB,aAAlE,KACA,4BAAQnB,KAAK,SAASL,UAAU,SAASsB,MAAM,KAAKC,QAASrB,EAAMsB,aAAnE,MACA,4BAAQnB,KAAK,SAASL,UAAU,SAASsB,MAAM,KAAKC,QAASrB,EAAMsB,aAAnE,MACA,4BAAQnB,KAAK,SAASL,UAAU,SAASsB,MAAM,KAAKC,QAASrB,EAAMsB,aAAnE,MACA,4BAAQnB,KAAK,SAASL,UAAU,SAASsB,MAAM,IAAIC,QAASrB,EAAMsB,aAAlE,YCEWC,G,6KAhBX,OACE,yBAAKzB,UAAU,iBACb,yBAAKA,UAAU,UACb,sDAAwB0B,KAAKxB,MAAMyB,OAAnC,QAEF,yBAAK3B,UAAU,OACb,8CAEF,yBAAKA,UAAU,gBACb,4BAAQuB,QAASG,KAAKxB,MAAM0B,OAA5B,e,GAXmBC,IAAMC,YCI/BhB,G,MAAU,CACV,CACEN,KAAM,eACNJ,MAAO,QACPK,MAAO,IACPC,QAAS,GACTC,KAAM,GAER,CACEH,KAAM,gBACNJ,MAAO,QACPK,MAAO,IACPC,QAAS,GACTC,KAAM,GAER,CACEH,KAAM,cACNJ,MAAO,QACPK,MAAO,IACPC,QAAS,GACTC,KAAM,GAER,CACEH,KAAM,eACNJ,MAAO,QACPK,MAAO,IACPC,QAAS,GACTC,KAAM,GAER,CACEH,KAAM,mBACNJ,MAAO,QACPK,MAAO,IACPC,QAAS,GACTC,KAAM,GAER,CACEH,KAAM,qBACNJ,MAAO,QACPK,MAAO,IACPC,QAAS,GACTC,KAAM,GAER,CACEH,KAAM,YACNJ,MAAO,QACPK,MAAO,IACPC,QAAS,GACTC,KAAM,KAuJGoB,E,kDAlJb,aAAe,IAAD,8BACZ,gBAUFC,YAAc,WACb,EAAKC,SAAS,CACZC,cAAe,EAAKC,MAAMD,gBAbf,EAiBdE,iBAAmB,WACjB,EAAKH,SAAS,CAACnB,QAAS,GAAIG,cAAe,GAAIoB,iBAAkB,KAlBrD,EAqBdC,cAAgB,WACd,EAAKN,cACL,EAAKI,oBAvBO,EAyDdG,cAAgB,SAACzB,EAASG,EAAeoB,GACvC,IAAIG,EAAqBvB,EAAcN,KAAO,EAE9C,GAA4B,QAAxBM,EAAcb,MAGhB,KAFAiC,EAEuB,EAAG,CAGxB,IAFA,IAAIlB,EAAIqB,EACJC,GAAsB,GAClBA,GACNC,QAAQC,IAAIxB,EAAGkB,GACXlB,EAAI,GAAKkB,GACkB,QAAzBvB,EAAQK,EAAI,GAAGf,OACjBU,EAAQK,GAAKL,EAAQK,EAAI,GACzBL,EAAQK,GAAGR,OACXM,EAAcN,OACdQ,KAKFsB,GAAsB,EAI1B3B,EAAQK,GAAKF,EACbH,EAAQK,GAAGR,KAAOQ,EAAI,EAGtBqB,EAAqBA,IAAwBvB,EAAcN,KAAO,EAAI6B,EAAqB,OAE3F1B,EAAQ0B,GAAsB1B,EAAQ0B,EAAqB,GAC3D1B,EAAQ0B,EAAqB,GAAKvB,EAClC,EAAKe,mBAIPQ,EAAqBA,EAAqB,GAAKH,EAAmB,EAAIG,EAAqB,EAG7FvB,EAAgBH,EAAQ0B,GAExB,EAAKP,SAAS,CAAC,QAAWnB,EAAS,cAAiBG,EAAe,iBAAoBoB,KAnG3E,EAsGdO,SAAW,SAACC,GAIV,IAAI/B,EAAU,EAAKqB,MAAMrB,QACrBG,EAAgB,EAAKkB,MAAMlB,cAC3BoB,EAAmB,EAAKF,MAAME,iBANd,EAQG,EAAKS,0BAA0B7B,EAAcR,MAAOQ,EAAcb,MAAOyC,EAAME,OAAOzB,OAAtGb,EARa,EAQbA,MAAOL,EARM,EAQNA,MAEda,EAAcR,MAAQA,EACtBQ,EAAcb,MAAQA,EACtBa,EAAcP,SAAW,IAAMmC,EAAME,OAAOzB,MAEhB,KAAxBL,EAAcR,MAChB,EAAKuB,cAEL,EAAKO,cAAczB,EAASG,EAAeoB,IArH7C,EAAKF,MAAQ,CACXrB,QAASA,EACTG,cAAeH,EAAQ,GACvBuB,iBAAkBvB,EAAQkC,OAC1Bd,cAAc,GANJ,E,sEA0BYe,EAAcC,EAAcC,GACpD,IAAIC,EAAW,EACXC,EAAW,QACXC,GAAiB,EAErB,GAA0B,IAAtBC,OAAOJ,GACT,OAAQD,GACN,IAAK,QACHG,EAAW,SACX,MACF,IAAK,SACHA,EAAW,SACX,MACF,IAAK,SACHA,EAAW,MACXC,GAAiB,EAavB,OANAF,EAAWG,OAAON,GAAgBM,OAAOJ,IAEnCG,GAAoBF,EAAW,KACjCA,EAAW,IAGR,CAAC3C,MAAO2C,EAAUhD,MAAOiD,K,+BAsEhC,OACE,kBAAC,WAAD,KACE,yBAAKrD,UAAU,aACb,4BAAQA,UAAU,WAChB,kBAAC,EAAD,OAEF,iCACiC,IAA9B0B,KAAKS,MAAMrB,QAAQkC,OAAe,KAAO,kBAAC,EAAD,CAAalC,QAASY,KAAKS,MAAMrB,QAASG,cAAeS,KAAKS,MAAMlB,iBAEhH,4BAAQjB,UAAU,WAChB,kBAAC,EAAD,CAAQwB,YAAaE,KAAKkB,aAG9B,6BACGlB,KAAKS,MAAMD,aAAe,kBAAC,EAAD,CAAgBP,OAAQD,KAAKS,MAAMrB,QAAQ,GAAGN,KAAMoB,MAAOF,KAAKY,gBAAmB,W,GA3ItGR,aC/CE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.8ecdce7a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './NavBar.css';\r\n\r\nconst NavBar = () => {\r\n\treturn (\r\n\t\t<nav className=\"zone\">\r\n      \t\t<ul className=\"main-nav\">\r\n\t\t        <li>Settings</li>\r\n\t\t        <li>Rules</li>\r\n\t\t        <li className='first-right-nav-item'>Save</li>\r\n\t\t        <li>Import</li>\r\n  \t\t\t</ul>\r\n  \t\t</nav>\r\n\t)\r\n}\r\n\r\nexport default NavBar;","import React, { Fragment } from 'react';\r\n\r\nimport './Player.css';\r\n\r\nconst Player = (props) => {\r\n\tlet bgColor = '';\r\n\tswitch (props.color) {\r\n\t\tcase 'red':\r\n\t\t\tbgColor = 'bg-red';\r\n\t\t\tbreak;\r\n\t\tcase 'yellow':\r\n\t\t\tbgColor = 'bg-yellow';\r\n\t\t\tbreak;\r\n\t\tcase 'orange':\r\n\t\t\tbgColor = 'bg-orange';\r\n\t\t\tbreak;\r\n\t\tcase 'blue':\r\n\t\t\tbgColor = 'bg-blue';\r\n\t\t\tbreak;\r\n\t\tcase 'green':\r\n\t\tdefault:\r\n\t\t\tbgColor = 'bg-green';\r\n\t\t\tbreak;\r\n\t}\r\n\t\r\n\tif (props.type === 'complete') {\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t\t<div className={bgColor + \" tc dib br3 pa3 ma2 grow bw2 shadow-5 player\"}>\r\n\t\t\t\t\t<div className='profile'>\r\n\t\t\t\t\t\t<img alt='robots' src={`https://robohash.org/${props.name}`}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='name'>\r\n\t\t    \t\t\t{props.name}\r\n\t\t    \t\t</div>\r\n\t\t    \t\t<div className='score'>\r\n\t\t\t\t\t\t{props.score} ({50 - props.score} left)\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='history'>\r\n\t\t\t\t\t\t{props.history}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='rank'>\r\n\t\t\t\t\t\t{props.rank}\r\n\t\t\t\t\t</div>\r\n\t\t  \t\t</div>\r\n\t\t\t</Fragment>\r\n\t\t);\r\n\t} else {\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div className={bgColor + \" br3 grow bw2 shadow-5 player-simple\"}>\r\n\t\t\t\t<div className='rank'>\r\n\t\t\t\t\t{props.rank}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='profile-simple'>\r\n\t\t\t\t\t<img alt='robots' src={`https://robohash.org/${props.name}`}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='name'>\r\n\t\t    \t\t{props.name}\r\n\t\t    \t</div>\r\n\t\t    \t<div className='score'>\r\n\t\t\t\t\t{props.score} ({50 - props.score} left)\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Player;","import React, { Fragment } from 'react';\r\n\r\nimport Player from './Player';\r\nimport './PlayersList.css'\r\n\r\nconst PlayersList = (props) => {\r\n\t\r\n\t/*console.log(props.players, props.currentPlayer);*/\r\n\t\r\n\tconst filteredPlayersArray = props.players.filter((player) => {\r\n\t\treturn player.name !== props.currentPlayer.name\r\n\t})\r\n\r\n\tconst rankingArray = filteredPlayersArray.map((player, i) => {\r\n\t\treturn <Player key={i} type='simple' rank={player.rank} color={player.color} name={player.name} score={player.score}/>\r\n\t})\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div className='current-player'>\r\n\t\t\t\t<Player type='complete' color={props.currentPlayer.color} name={props.currentPlayer.name} score={props.currentPlayer.score} history={props.currentPlayer.history} rank={props.currentPlayer.rank}/>\r\n\t\t\t</div>\r\n\t\t\t<div className='ranking'>\r\n\t\t\t\t{rankingArray}\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nexport default PlayersList;","import React, { Fragment } from 'react';\r\nimport './Points.css';\r\n\r\nconst Points = (props) => {\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div className='buttons-container'>\r\n\t\t\t\t<button type='button' className='button' value='1' onClick={props.scoreChange}>1</button>\r\n\t\t\t\t<button type='button' className='button' value='2' onClick={props.scoreChange}>2</button>\r\n\t\t\t\t<button type='button' className='button' value='3' onClick={props.scoreChange}>3</button>\r\n\t\t\t\t<button type='button' className='button' value='4' onClick={props.scoreChange}>4</button>\r\n\t\t\t\t<button type='button' className='button' value='5' onClick={props.scoreChange}>5</button>\r\n\t\t\t\t<button type='button' className='button' value='6' onClick={props.scoreChange}>6</button>\r\n\t\t\t\t<button type='button' className='button' value='7' onClick={props.scoreChange}>7</button>\r\n\t\t\t\t<button type='button' className='button' value='8' onClick={props.scoreChange}>8</button>\r\n\t\t\t\t<button type='button' className='button' value='9' onClick={props.scoreChange}>9</button>\r\n\t\t\t\t<button type='button' className='button' value='10' onClick={props.scoreChange}>10</button>\r\n\t\t\t\t<button type='button' className='button' value='11' onClick={props.scoreChange}>11</button>\r\n\t\t\t\t<button type='button' className='button' value='12' onClick={props.scoreChange}>12</button>\r\n\t\t\t\t<button type='button' className='button' value='0' onClick={props.scoreChange}>MISS</button>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nexport default Points;","import React from 'react';\r\nimport './EndOfGamePopup.css';\r\n\r\nclass EndOfGamePopup extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='popup bg-blue'>\r\n        <div className='winner'>\r\n          <h1>{`The winner is : ${this.props.winner} !`}</h1>\r\n        </div>\r\n        <div className='eog'>\r\n          <h1>End of game !</h1>\r\n        </div>\r\n        <div className='close_button'>\r\n          <button onClick={this.props.close}>Close</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EndOfGamePopup;","import React, { Component, Fragment } from 'react';\nimport NavBar from './NavBar';\nimport PlayersList from './PlayersList';\nimport Points from './Points';\nimport EndOfGamePopup from './EndOfGamePopup';\nimport './App.css';\n\nlet players = [\n    {\n      name: 'Laurent Gina',\n      color: 'green',\n      score: '0',\n      history: '',\n      rank: 1\n    },\n    {\n      name: 'Sarah Fraichi',\n      color: 'green',\n      score: '0',\n      history: '',\n      rank: 2\n    },\n    {\n      name: 'Homer Dalor',\n      color: 'green',\n      score: '0',\n      history: '',\n      rank: 3\n    },\n    {\n      name: 'Sarah Croche',\n      color: 'green',\n      score: '0',\n      history: '',\n      rank: 4\n    },\n    {\n      name: 'James Patagueule',\n      color: 'green',\n      score: '0',\n      history: '',\n      rank: 5\n    },\n    {\n      name: 'Pacome Toutlemonde',\n      color: 'green',\n      score: '0',\n      history: '',\n      rank: 6\n    },\n    {\n      name: 'Jean Chit',\n      color: 'green',\n      score: '0',\n      history: '',\n      rank: 7\n    },\n  ]\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      players: players,\n      currentPlayer: players[0],\n      nbOfAlivePlayers: players.length,\n      showEogPopup: false\n    };\n    /*console.log(this.state.players);*/\n  }\n\n  togglePopup = () => {\n   this.setState({\n     showEogPopup: !this.state.showEogPopup\n   });\n  }\n\n  resetPlayersInfo = () => {\n    this.setState({players: [], currentPlayer: {}, nbOfAlivePlayers: 0});\n  }\n\n  closeEogPopup = () => {\n    this.togglePopup();\n    this.resetPlayersInfo();\n  }\n\n  updatePlayerScoreAndColor(currentScore, currentColor, newPoints) {\n    let newScore = 0;\n    let newColor = 'green';\n    let isDisqualified = false;\n\n    if (Number(newPoints) === 0) {\n      switch (currentColor) {\n        case 'green':\n          newColor = 'yellow';\n          break;\n        case 'yellow':\n          newColor = 'orange';\n          break;\n        case 'orange':\n          newColor = 'red';\n          isDisqualified = true;\n          break;\n        default:\n          break;\n      }\n    }\n\n    newScore = Number(currentScore) + Number(newPoints);\n      \n    if ((!isDisqualified) && (newScore > 50)) {\n        newScore = 50 / 2;\n      }\n    \n    return {score: newScore, color: newColor};\n  }\n\n  managePlayers = (players, currentPlayer, nbOfAlivePlayers) => {\n    let indexCurrentPlayer = currentPlayer.rank - 1;\n\n    if (currentPlayer.color === 'red') {\n      nbOfAlivePlayers--;\n\n      if (nbOfAlivePlayers > 1) {\n        let i = indexCurrentPlayer;\n        let isRearrangementDone = false;\n        while (!isRearrangementDone) {\n          console.log(i, nbOfAlivePlayers);\n          if (i + 1 <= nbOfAlivePlayers) {\n            if (players[i + 1].color !== 'red') {\n              players[i] = players[i + 1];\n              players[i].rank--;\n              currentPlayer.rank++;\n              i++;\n            } else {\n              isRearrangementDone = true;\n            }\n          } else {\n            isRearrangementDone = true;\n          }\n        }\n\n        players[i] = currentPlayer;\n        players[i].rank = i + 1;\n\n        // Determine who is the next player (new \"current player\")\n        indexCurrentPlayer = indexCurrentPlayer !==  currentPlayer.rank - 1 ? indexCurrentPlayer : 0;\n      } else {\n        players[indexCurrentPlayer] = players[indexCurrentPlayer + 1];\n        players[indexCurrentPlayer + 1] = currentPlayer;\n        this.togglePopup();\n      }\n    } else {\n      // Determine who is the next player (new \"current player\")\n      indexCurrentPlayer = indexCurrentPlayer + 1 >= nbOfAlivePlayers ? 0 : indexCurrentPlayer + 1;\n    }\n    \n    currentPlayer = players[indexCurrentPlayer];\n\n    this.setState({'players': players, 'currentPlayer': currentPlayer, 'nbOfAlivePlayers': nbOfAlivePlayers});\n  }\n\n  onChange = (event) => {\n    /*console.log(event.target.value);*/\n    \n    // Update current player score, color and history\n    let players = this.state.players;\n    let currentPlayer = this.state.currentPlayer;\n    let nbOfAlivePlayers = this.state.nbOfAlivePlayers;\n    \n    const {score, color} = this.updatePlayerScoreAndColor(currentPlayer.score, currentPlayer.color, event.target.value);\n    /*console.log(score, color);*/\n    currentPlayer.score = score;\n    currentPlayer.color = color;\n    currentPlayer.history += ' ' + event.target.value;\n\n    if (currentPlayer.score === 50) {\n      this.togglePopup();\n    } else {\n      this.managePlayers(players, currentPlayer, nbOfAlivePlayers);\n    }\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div className='container'>\n          <header className='bg-blue'>\n            <NavBar />\n          </header>\n          <section>\n            {this.state.players.length === 0 ? null : <PlayersList players={this.state.players} currentPlayer={this.state.currentPlayer}/>}\n          </section>\n          <footer className='bg-blue'>\n            <Points scoreChange={this.onChange}/>\n          </footer>\n        </div>\n        <div>\n          {this.state.showEogPopup ? <EndOfGamePopup winner={this.state.players[0].name} close={this.closeEogPopup}/> : null}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}